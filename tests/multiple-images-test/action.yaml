name: Publish container publishes multiple images
description: Test to validate that publish container publishes multiple images
runs:
  using: composite
  steps:
    - name: Initialize test
      shell: bash
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        initialize_test "Publish container publishes multiple images" "multiple-images-test"
        
    - id: publish
      name: Run publish-container action with multiple image names
      uses: ./
      with:
        registryHost: localhost:5000
        registryUsername: testuser
        registryPassword: testpassword
        imageNames: |
          localhost:5000/multiple-images-test-1
          localhost:5000/multiple-images-test-2
        version: 1.0.0
        context: tests/multiple-images-test
        dockerfile: tests/multiple-images-test/Dockerfile
        writeSummary: false
        
    - name: Assert first image was published with correct tags
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert first image was published with correct tags"
        
        tags=$(curl -s -u testuser:testpassword http://localhost:5000/v2/multiple-images-test-1/tags/list | jq -r '.tags[]')
        echo $tags
        exit_code=0
        
        # Check for expected version tags
        for tag in "1.0.0" "1.0" "1"; do
          if echo "$tags" | grep -q "$tag"; then
            success "$tag" "First image has expected tag: $tag"
          else
            failure "$tag" "First image missing expected tag: $tag"
            exit_code=1
          fi
        done
        exit $exit_code
        
    - name: Assert second image was published with correct tags
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert second image was published with correct tags"
        
        tags=$(curl -s -u testuser:testpassword http://localhost:5000/v2/multiple-images-test-2/tags/list | jq -r '.tags[]')
        echo $tags
        exit_code=0
        
        # Check for expected version tags
        for tag in "1.0.0" "1.0" "1"; do
          if echo "$tags" | grep -q "$tag"; then
            success "$tag" "Second image has expected tag: $tag"
          else
            failure "$tag" "Second image missing expected tag: $tag"
            exit_code=1
          fi
        done
        exit $exit_code
        
    - name: Assert first image runs
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert first image runs"
        
        docker pull localhost:5000/multiple-images-test-1:1.0.0
        output=$(docker run --rm localhost:5000/multiple-images-test-1:1.0.0)
        echo $output
        
        if [ "$output" = "This is a test container" ]; then
          success "First container runs with expected output"
        else
          failure "First container output incorrect: $output"
          exit 1
        fi
        
    - name: Assert second image runs
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert second image runs"
        
        docker pull localhost:5000/multiple-images-test-2:1.0.0
        output=$(docker run --rm localhost:5000/multiple-images-test-2:1.0.0)
        echo $output
        
        if [ "$output" = "This is a test container" ]; then
          success "Second container runs with expected output"
        else
          failure "Second container output incorrect: $output"
          exit 1
        fi
        
    - name: Assert summary includes both images
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        set_test_name "Assert summary includes both images"
        
        summary="${{ steps.publish.outputs.summary }}"
        
        if echo "$summary" | grep -q "multiple-images-test-1" && echo "$summary" | grep -q "multiple-images-test-2"; then
          success "Summary includes both image names"
        else
          failure "Summary doesn't include both image names"
          echo "Summary: $summary"
          exit 1
        fi
        
    - name: Finalize test
      shell: bash
      if: always()
      run: |
        source ${{ github.workspace }}/tests/test-reporter.sh
        finalize_test
