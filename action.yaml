name: Build and publish container
description: Sets up standard tags, then builds and publishes a container image to the container registry.

inputs:
  registryHost:
    description: The host of the container registry to push to.
    required: true
  registryUsername:
    description: The username to use to authenticate with the container registry.
    required: true
  registryPassword:
    description: The token to use to authenticate with the container registry.
    required: true
  imageNames:
    description: The names of the images to tag and publish.
    required: true
  version:
    description: The semantic version of the image to tag and publish.
    required: true
  containerSecrets:
    description: The secrets to use when building the container.
    required: false
    default: ""
  context:
    description: The context to use when building.
    required: false
    default: ${{ github.workspace }}
  dockerfile:
    description: The dockerfile to build.
    required: false
    default: ${{ github.workspace }}/Dockerfile
  messageTemplate:
    description: "Jinja2 markdown template used to generate the build summary. Available variables: version, owner, repo, registry, images, tags, and labels"
    required: false
    default: |
      # Created Containers

      {% for image in images %}
      - Image {{ image }} pushed to {{ registry }}.
      {% endfor %}

      ## Tags
      {% for tag in tags %}
      - {{ tag }}
      {% endfor %}

      ## Labels
      {% for key, value in labels.items() %}
      - **{{ key }}**: {{ value }}
      {% endfor %}
outputs:
  summary:
    description: Markdown summary of the build results
    value: ${{ steps.summary.outputs.summary }}

runs:
  using: composite
  steps:
    - id: containerMetadata
      name: Generate tags
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.imageNames }}
        # generate tags based on the following events/attributes
        tags: |
          type=ref,event=branch,suffix=-latest
          type=ref,event=pr
          type=semver,pattern={{version}},value=${{ inputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
          type=semver,pattern={{major}},value=${{ inputs.version }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registryHost }}
        username: ${{ inputs.registryUsername }}
        password: ${{ inputs.registryPassword }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ steps.containerMetadata.outputs.tags }}
        labels: ${{ steps.containerMetadata.outputs.labels }}
        secrets: ${{ inputs.containerSecrets }}

    - id: resultMetadata
      name: Create JSON metadata object
      shell: bash
      run: |
        # Create a dedicated directory for our action files
        working_directory="${{ github.workspace }}/.actions.publish-container"
        mkdir -p "$working_directory"

        # Parse imageNames into a proper JSON array using jq
        images=$(echo '${{ toJSON(inputs.imageNames) }}' | jq 'split("\n") | map(select(length > 0))')

        repository="${{ github.repository }}"
        owner="${repository%%/*}"
        repo="${repository#*/}"

        # Create input data JSON for template
        jq -n --argjson images "$images" \
              --arg version "${{ inputs.version }}" \
              --arg owner "$owner" \
              --arg repo "$repo" \
              --arg registry "${{ inputs.registryHost }}" \
              --argjson metadata '${{ steps.containerMetadata.outputs.json }}' \
              '{
                "version": $version,
                "owner": $owner,
                "repo": $repo,
                "registry": $registry,
                "images": $images,
                "tags": $metadata.tags,
                "labels": $metadata.labels
              }' > "$working_directory/metadata.json"

        echo "Using template data:"
        cat "$working_directory/metadata.json"

        # Make the input template available as a file for the next step
        echo "${{ inputs.messageTemplate }}" > "$working_directory/template.md.j2"
        echo "In template:"
        cat "$working_directory/template.md.j2"

    - name: Create container build summary
      uses: cuchi/jinja2-action@v1.3.0
      with:
        template: ${{ github.workspace }}/.actions.publish-container/template.md.j2
        output_file: ${{ github.workspace }}/.actions.publish-container/output.md
        data_file: ${{ github.workspace }}/.actions.publish-container/metadata.json
        data_format: json

    - name: Write summary to GitHub
      shell: bash
      run: |
        cat "${{ github.workspace }}/.actions.publish-container/output.md" >> $GITHUB_STEP_SUMMARY
